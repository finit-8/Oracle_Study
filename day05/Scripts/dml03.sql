-- 게시판 최신글 정렬
SELECT tp.ID, TP.POST_TITLE, TU.USER_EMAIL
FROM TBL_POST tp
JOIN TBL_USER tu
ON tp.USER_ID = tu.ID		-- tp.USER_ID는 내가 갖고 있는 ID???			tu.ID는 내가 참조하려는 ID
ORDER BY tp.ID DESC;

-- 댓글을 단 사용자 조회
SELECT TR.REPLY_CONTENT, TU.USER_EMAIL
FROM TBL_REPLY TR 
JOIN TBL_USER TU
ON TR.USER_ID = TU.ID;

-- [SQL의 동작순서]
-- FROM으로 데이터 먼저 가져오고
-- > JOIN (테이블(데이터)끼리 붙일 수 있기때문)
-- > ON
-- > WHERE
-- > GROUP BY 
-- > HAVING
-- > SELECT
-- > ORDER BY (는 항상 마지막)



--구매자
--  이름 나이 성별 주소 핸드폰

--상품
--  브랜드 상품명 가격 재고

--주문
--  주문상태 주문일자 주문완료일자

CREATE SEQUENCE SEQ_BUYER;
CREATE TABLE TBL_BUYER(
	ID NUMBER CONSTRAINT PK_BUYER PRIMARY KEY,
	BUYER_NAME VARCHAR2(255) NOT NULL,
	BUYER_AGE NUMBER,
	BUYER_GENDER CHAR(10) CHECK(BUYER_GENDER IN('남', '여')),
	BUYER_ADDRESS VARCHAR2(255),
	BUYER_PHONE VARCHAR2(255)
);
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '짱구', 40, '남', '서울시 강남구', '010-1212-3434');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '유리', 20, '여', '서울시 종로구', '010-3456-7289');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '맹구', 35, '남', '서울시 노원구', '010-5920-8016');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '철수', 30, '남', '서울시 용산구', '010-5533-3114');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '훈이', 20, '남', '경기도 남양주시', '010-4871-6674');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '수지', 40, '여', '서울시 강북구', '010-1279-8972');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '봉미선', 50, '여', '서울시 강북구', '010-3456-7979');
INSERT INTO TBL_BUYER
VALUES(SEQ_BUYER.NEXTVAL, '신형만', 49, '남', '서울시 강북구', '010-4993-4892');

SELECT * FROM TBL_BUYER;



CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT(
	ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
	PRODUCT_BRAND VARCHAR2(255) NOT NULL,
	PRODUCT_NAME VARCHAR2(255) NOT NULL,
	PRODUCT_PRICE NUMBER,
	PRODUCT_STOCK NUMBER DEFAULT 999
);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '뉴발란스', '브리즈 신발', 139000, 500);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '아디다스', '후드집업', 119000, 250);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '아크테릭스', '후드티', 290000, 100);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '로라로라', '반팔티', 38700, 600);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '엠엘비', '볼캡', 49000, 30);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '무신사', '스웨이드 기디건', 95890, 170);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '스웨이드', '청바지', 57600, 310);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '스파오', '반팔셔츠', 25900, 120);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '아이더', '캐시미어자켓', 618420, 50);
INSERT INTO TBL_PRODUCT 
VALUES(SEQ_PRODUCT.NEXTVAL, '스탠리', '텀블러', 62000, 550);

SELECT * FROM TBL_PRODUCT tp ;



CREATE SEQUENCE SEQ_ORDER;
CREATE TABLE TBL_ORDER(
	ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
	ORDER_STATUS VARCHAR2(255) DEFAULT '배송중',
	ORDER_START_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	ORDER_END_DATE TIMESTAMP,
	BUYER_ID NUMBER,
	PRODUCT_ID NUMBER,
	CONSTRAINT FK_ORDER_BUYER FOREIGN KEY(BUYER_ID)
	REFERENCES TBL_BUYER(ID),
	CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
	REFERENCES TBL_PRODUCT(ID)
);

INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 1, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 2);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 9);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 6, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 4);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 6);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 2);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 4);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 1, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 10);

SELECT * FROM TBL_ORDER;

-- 주문자 정보 조회
SELECT *
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID;

-- 주문날짜, 사용자의 이름만 조회
SELECT TBO.ORDER_START_DATE, TBB.BUYER_NAME
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB 
ON TBO.BUYER_ID = TBB.ID;




-- 가장 인기 많은 상품을 구매한 사용자의 정보와 상품 이름 조회
	-- 가장 인기 많은 상품 : 
	SELECT PRODUCT_ID, COUNT(PRODUCT_ID)
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID;				-- PRODUCT_ID 3번이 7회 주문됨 (아크테릭스 후드티)
	
	-- 가장 인기 많은 상품을 구매한 사용자ID			출력보면 이거 아닌거 같은데???
	SELECT BUYER_ID
	FROM TBL_ORDER
	GROUP BY BUYER_ID
	HAVING MAX(PRODUCT_ID) IN (
		SELECT COUNT(PRODUCT_ID)
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	);

	SELECT PRODUCT_ID
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID
	HAVING MAX(PRODUCT_ID) IN (
		SELECT COUNT(PRODUCT_ID)
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	);									-- 왜 3번이 아니라 PRODUCT_ID 7번이 제일 높은 수(판매 많은 제품)로 나오나?

SELECT TBP.PRODUCT_NAME
FROM TBL_ORDER TBO
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID	
GROUP BY TBP.PRODUCT_NAME
HAVING MAX(PRODUCT_ID) IN (
	SELECT PRODUCT_ID
	FROM TBL_ORDER
	GROUP BY PRODUCT_ID
	HAVING MAX(PRODUCT_ID) IN (
		SELECT COUNT(PRODUCT_ID)
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
	)
);										-- 7 3 1 2 4 (청바지 후드티 브리즈신발 후드집업 반팔티) ==> 원하는 결과값이 아님.
	

SELECT * FROM TBL_ORDER ; 
SELECT * FROM TBL_PRODUCT;
SELECT * FROM TBL_BUYER;

-- 정답1.
SELECT TBU.*, TBP.PRODUCT_NAME
FROM (
   SELECT *
   FROM TBL_ORDER TBO
   WHERE PRODUCT_ID = (
      SELECT PRODUCT_ID
      FROM TBL_ORDER
      GROUP BY PRODUCT_ID
      HAVING COUNT(PRODUCT_ID) = (
         SELECT MAX(COUNT(PRODUCT_ID))
         FROM TBL_ORDER
         GROUP BY PRODUCT_ID
      )
   )
) TBO
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID;



-- 정답2.
SELECT TBU.*, TBP.PRODUCT_NAME
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE TBP.ID = (
   SELECT PRODUCT_ID
   FROM TBL_ORDER
   GROUP BY PRODUCT_ID
   HAVING COUNT(PRODUCT_ID) = (
      SELECT MAX(COUNT(PRODUCT_ID))
      FROM TBL_ORDER
      GROUP BY PRODUCT_ID
   )
);



-- 1) 각 상품 이름과 각 상품별 총 판매 매출 조회				
SELECT
	PRODUCT_NAME AS "상품명",
	COUNT(PRODUCT_ID) * PRODUCT_PRICE AS "매출"		-- 30 * PRODUCT_ID별 상품 가격 ???
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP 
ON TBO.PRODUCT_ID = TBP.ID
GROUP BY PRODUCT_ID, PRODUCT_NAME, PRODUCT_PRICE; --(같은 테이블끼리는 GROUP BY 묶어도 되는데, 다른 테이블끼리는 안됨)

SELECT * FROM TBL_PRODUCT tp ;
SELECT * FROM TBL_ORDER to2 ;
SELECT COUNT(PRODUCT_ID) FROM TBL_ORDER to2 ;

-- 2) 상품을 구매한 20 ~ 30대 구매자의 수 조회
SELECT 
	BUYER_AGE AS "구매자 나이",
	COUNT(BUYER_AGE) || '건' AS "20 ~ 3O대 회원 구매 횟수"		-- 토탈 17개
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_AGE >= 20 AND TBB.BUYER_AGE < 40
GROUP BY BUYER_AGE;

-- 정답에서는 20개 나오는데???
SELECT COUNT(ID) || '건' AS "20~30대 주문 개수"
FROM TBL_ORDER
WHERE BUYER_ID IN (
   SELECT ID
   FROM TBL_BUYER
   WHERE BUYER_AGE >= 20 AND BUYER_AGE <= 39
);
	
-- 3) 뉴발란스를 구매한 20대 구매자의 이름 조회
-- 알고리즘: BUYER_AGE > 20 AND NUYER_AGE < 30
--			


-- 강사님 풀이
SELECT TBU.BUYER_NAME
FROM (
   SELECT *
   FROM TBL_ORDER
   WHERE PRODUCT_ID = (
      SELECT ID
      FROM TBL_PRODUCT
      WHERE PRODUCT_BRAND ='뉴발란스'
   ) 
) TBO
JOIN TBL_BUYER TBU
ON TBO.BUYER_ID = TBU.ID
WHERE TBU.BUYER_AGE = 20;

--4) 여성의 나이대별 평균 지출 금액 조회
-- 알고리즘 : BUYER_GENDER LIKE '여', TBL_ORDER의 BUYER_ID
SELECT * FROM TBL_BUYER tb ;
SELECT * FROM TBL_ORDER to2 ;

SELECT
	AVG(PRODUCT_PRICE)
FROM TBL_BUYER TBB
JOIN TBL_ORDER TBO
ON TBB.ID = TBO.BUYER_ID
WHERE TBB.BUYER_GENDER LIKE '여';

--5) 쇼핑몰의 총 판매액수 조회
-- 알고리즘: 판매액수 = 주문테이블에서 PRODUCT_ID
SELECT * FROM TBL_ORDER to2 ;

SELECT SUM(PRODUCT_PRICE)
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP 
ON TBO.PRODUCT_ID = TBP.ID 
JOIN TBL_BUYER TBB 
ON TBO.BUYER_ID = TBB.ID ;

--6) 가장 매출이 적은 상품을 구매한 사용자의 이름과, 상품명 조회
-- 알고리즘: 매출이 적은 상품
SELECT TBB.BUYER_NAME , TBP.PRODUCT_NAME 
FROM TBL_ORDER TBO
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID 
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID 
GROUP BY PRODUCT_NAME, BUYER_NAME
HAVING MIN(TBO.PRODUCT_ID);

--7) 경기도에 거주한 사람이 구매한 상품과, 사용자 정보를 조회
SELECT *
FROM TBL_ORDER TBO
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID 
	JOIN TBL.PRODUCT TBP 
	ON TBO.PRODUCT_ID = TBP.ID
WHERE TBB.BUYER_ADDRESS LIKE '경기도%';

-- 8) 30대 남성이 가장 많이 구매한 상품의 이름 조회
SELECT *
FROM (
   SELECT 
      PRODUCT_NAME AS "30대의 인기상품", 
      COUNT(PRODUCT_NAME) AS "구매 개수"
   FROM TBL_ORDER TBO
   JOIN TBL_BUYER TBU
   ON TBO.BUYER_ID = TBU.ID
   JOIN TBL_PRODUCT TBP
   ON TBO.PRODUCT_ID = TBP.ID
   WHERE TBU.BUYER_AGE BETWEEN 30 AND 39
   GROUP BY PRODUCT_NAME
   ORDER BY COUNT(PRODUCT_NAME) DESC
)
WHERE ROWNUM = 1;

--9) 가장 적게 판매된 상품의 이름

--10) 평균 나이보다 많은 사용자들이 구매한 상품과 사용자의 정보 조회

--11) 20대 여성이 구매한 상품 이름과 주문 건수 조회

--12) 가장 인기가 없는 상품 조회