--REPEAT
-- 22) 여성 구매자들이 주문한 상품들의 평균 가격을 조회
-- 29) '유리' 구매자의 주문 내역 중 가장 최근 주문한 상품의 이름과 주문일자를 조회
-- 30) 구매자별로 주문 완료 일자가 가장 빠른 주문 내역을 조회
-- 40) 구매자별로 주문한 상품 개수를 조회



-- 13) 유저 중 신형만을 형만으로 이름 변경
SELECT BUYER_NAME 
FROM TBL_BUYER
WHERE BUYER_NAME = '신형만';

--UPDATE TBL_BUYER 
--SET BUYER_NAME = (
--	SELECT BUYER_NAME 
--	FROM TBL_BUYER
--	WHERE BUYER_NAME = '신형만'				 
--);								-- 모든 행 데이터 바꼇네 ㅋㅋㅋㅋㅋ

UPDATE TBL_BUYER
SET BUYER_NAME = '형만'
WHERE BUYER_NAME = (
	SELECT BUYER_NAME 
	FROM TBL_BUYER
	WHERE BUYER_NAME = '신형만'		
);
SELECT *
FROM TBL_BUYER tb ;

-- 14) 신상품 '나이키', '에어맥스 95', 가격 179000원, 재고 200개를 TBL_PRODUCT 테이블에 추가
SELECT * FROM TBL_PRODUCT ;
INSERT INTO TBL_PRODUCT 
VALUES (SEQ_PRODUCT.NEXTVAL, '나이키', '에어맥스 95', 179000, 200);
SELECT * FROM TBL_PRODUCT ;

-- 15) BUYER_NAME이 '철수'인 사람의 핸드폰 번호를 '010-0000-0000'으로 변경
SELECT * FROM TBL_BUYER;
UPDATE TBL_BUYER
SET BUYER_PHONE = '010-0000-0000'
WHERE BUYER_NAME = '철수';
SELECT * FROM TBL_BUYER;

-- 16) PRODUCT_NAME이 '후드티'인 상품의 가격을 310000으로 인상
UPDATE TBL_PRODUCT 
SET PRODUCT_PRICE = 310000
WHERE PRODUCT_NAME = '후드티';
SELECT * FROM TBL_PRODUCT ;


-- 17) 18) 은 제일 마지막에 푼다 (데이터 삭제하는 문제)

-- 19) '짱구'가 주문한 상품의 이름과 가격을 조회
SELECT TBP.PRODUCT_NAME, TBP.PRODUCT_PRICE
FROM TBL_ORDER TBO
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
WHERE TBB.BUYER_NAME = '짱구';

-- 20) 각 구매자별로 주문한 상품의 총 개수를 조회 (구매자 이름, 주문 건수)
SELECT TBB.BUYER_NAME AS "구매자 이름", COUNT(TBP.ID) AS "주문 건수"
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
GROUP BY TBB.BUYER_NAME;


-- 21) 가장 많이 주문된 상품 3개의 이름과 주문 횟수를 내림차순으로 조회
SELECT TBP.PRODUCT_NAME, COUNT(TBP.PRODUCT_NAME)
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
GROUP BY TBP.PRODUCT_NAME
ORDER BY COUNT(TBP.PRODUCT_NAME) DESC ;

SELECT *
FROM (
	SELECT TBP.PRODUCT_NAME, COUNT(TBP.PRODUCT_NAME)
	FROM TBL_ORDER TBO
		JOIN TBL_PRODUCT TBP
		ON TBO.PRODUCT_ID = TBP.ID
		JOIN TBL_BUYER TBB
		ON TBO.BUYER_ID = TBB.ID
	GROUP BY TBP.PRODUCT_NAME
	ORDER BY COUNT(TBP.PRODUCT_NAME) DESC  
)
WHERE ROWNUM <= 3;

-- 22) 여성 구매자들이 주문한 상품들의 평균 가격을 조회
		-- 방법1.
		SELECT PRODUCT_NAME, TBP.PRODUCT_PRICE AS "여성 구매자들이 주문한 상품들의 가격"
		FROM TBL_ORDER TBO
			JOIN TBL_PRODUCT TBP
			ON TBO.PRODUCT_ID = TBP.ID
			JOIN TBL_BUYER TBB 
			ON TBO.BUYER_ID = TBB.ID
		WHERE TBB.BUYER_GENDER = '여';
		--GROUP BY PRODUCT_PRICE, PRODUCT_NAME;			
		--GROUP BY는 집계함수를 같이 쓰지 않는다면 → 중복된 행을 합쳐서 1건만 남기기 때문에
		--PRODUCT_NAME, PRODUCT_PRICE 조합이 같은 주문이 여러 번 있어도, GROUP BY 때문에 중복이 사라져버린 것.
		--그래서 GROUP BY를 쓰지 않아야 실제로 여성 구매자들이 주문한 모든 상품이 조회됨.
		
		SELECT AVG(PRODUCT_PRICE) AS "여성 구매자들이 주문한 상품들의 평균가격"
		FROM TBL_PRODUCT
		WHERE PRODUCT_PRICE IN (										-- WHERE절은 조건 충족 여부만 확인하기 때문에
			SELECT TBP.PRODUCT_PRICE AS "여성 구매자들이 주문한 상품들의 가격"		-- 서브쿼리 안에서 TBP.PRODUCT_PRICE가 100번 나오든 1번 나오든, 겉에 쿼리에서는 “그 값이 존재한다”는 것만 체크
			FROM TBL_ORDER TBO
				JOIN TBL_PRODUCT TBP
				ON TBO.PRODUCT_ID = TBP.ID
				JOIN TBL_BUYER TBB 
				ON TBO.BUYER_ID = TBB.ID
			WHERE TBB.BUYER_GENDER = '여'
		);																-- 그래서 지금 이 코드는 가중치(같은 상품 여러번 주문하는 경우)가 포함 안된 결과값임.
		
		SELECT AVG(TBP.PRODUCT_PRICE) AS "여성 구매자들이 주문한 상품들의 평균가격"		-- 정답코드
		FROM TBL_ORDER TBO
			JOIN TBL_PRODUCT TBP
			ON TBO.PRODUCT_ID = TBP.ID
			JOIN TBL_BUYER TBB 
			ON TBO.BUYER_ID = TBB.ID
		WHERE TBB.BUYER_GENDER = '여';									
	
	
		-- 방법2. FROM절에 테이블이 아닌 서브쿼리 값을 주는 방식
		SELECT PRODUCT_NAME, PRODUCT_PRICE 
		FROM (
			SELECT *
			FROM TBL_ORDER
			WHERE BUYER_ID IN (
				SELECT ID
				FROM TBL_BUYER
				WHERE BUYER_GENDER = '여'
			)
		) TBO
		JOIN TBL_PRODUCT TBP
		ON TBO.PRODUCT_ID = TBP.ID;
		--GROUP BY PRODUCT_NAME, PRODUCT_PRICE;
		--GROUP BY는 집계함수를 같이 쓰지 않는다면 → 중복된 행을 합쳐서 1건만 남기기 때문에
		--PRODUCT_NAME, PRODUCT_PRICE 조합이 같은 주문이 여러 번 있어도, GROUP BY 때문에 중복이 사라져버린 것.
		--그래서 GROUP BY를 쓰지 않아야 실제로 여성 구매자들이 주문한 모든 상품이 조회됨.
		
		SELECT FLOOR(AVG(PRODUCT_PRICE)) 
		FROM (
			SELECT *
			FROM TBL_ORDER
			WHERE BUYER_ID IN (
				SELECT ID
				FROM TBL_BUYER
				WHERE BUYER_GENDER = '여'
			)
		) TBO
		JOIN TBL_PRODUCT TBP
		ON TBO.PRODUCT_ID = TBP.ID;
		
		SELECT * FROM TBL_BUYER;
		SELECT * FROM TBL_PRODUCT;
		


-- 23) 나이가 30세 이상인 남성 구매자들의 이름과 주소를 조회
SELECT BUYER_NAME, BUYER_ADDRESS, BUYER_AGE
FROM TBL_BUYER
WHERE BUYER_AGE >= 30 AND BUYER_GENDER = '남';

-- 24) 재고가 100개 이하인 상품 목록을 브랜드명과 함께 조회
SELECT PRODUCT_NAME, PRODUCT_BRAND, PRODUCT_STOCK
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK <= 100;

-- 25) '서울시 강북구'에 사는 구매자들의 이름과 핸드폰 번호를 조회
SELECT BUYER_NAME, BUYER_PHONE, BUYER_ADDRESS
FROM TBL_BUYER
WHERE BUYER_ADDRESS LIKE '%서울시 강북구%';


-- 26) 주문 상태가 '배송중'인 주문 내역과 해당 주문자의 이름, 상품명을 조회
SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME
FROM TBL_ORDER TBO
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
	JOIN TBL_PRODUCT TBP 
	ON TBO.PRODUCT_ID = TBP.ID
WHERE TBO.ORDER_STATUS = '배송중';

SELECT * FROM TBL_ORDER;

-- 27) '훈이' 구매자가 주문한 상품들의 총 가격 합계 조회
SELECT SUM(PRODUCT_PRICE)
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_NAME = '훈이';

-- 28) 상품별 기대 매출 조회
-- 기대 매출??		==> 상품별 재고가 다 소진됏을 때의 가격 ==> 재고 * 가격
SELECT PRODUCT_NAME, PRODUCT_STOCK * PRODUCT_PRICE AS "상품별 기대 매출"
FROM TBL_PRODUCT;


-- 29) '유리' 구매자의 주문 내역 중 가장 최근 주문한 상품의 이름과 주문일자를 조회
		-- 방법1. 
		SELECT * FROM TBL_ORDER;
		
		SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBO.ORDER_START_DATE
		FROM TBL_ORDER TBO
			JOIN TBL_PRODUCT TBP
			ON TBO.PRODUCT_ID = TBP.ID
			JOIN TBL_BUYER TBB
			ON TBO.BUYER_ID = TBB.ID
		WHERE TBB.BUYER_NAME = '유리';				-- 후드티(1) 볼캡(2) 후드티(3) 중에 주문일자가 가장 최신인 것은 후드티(3)
		
		SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, MAX(TBO.ORDER_START_DATE)		-- MAX로 안삭 못하는데.. 어떻게 처리하지? ROWNUM이나 FETCH로 처리
		FROM TBL_ORDER TBO
			JOIN TBL_PRODUCT TBP
			ON TBO.PRODUCT_ID = TBP.ID
			JOIN TBL_BUYER TBB
			ON TBO.BUYER_ID = TBB.ID
		WHERE TBB.BUYER_NAME = '유리'
		GROUP BY TBP.PRODUCT_NAME, TBO.ORDER_START_DATE ;
		
		SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBO.ORDER_START_DATE
		FROM TBL_ORDER TBO
			JOIN TBL_PRODUCT TBP
			ON TBO.PRODUCT_ID = TBP.ID
			JOIN TBL_BUYER TBB
			ON TBO.BUYER_ID = TBB.ID
		WHERE TBB.BUYER_NAME = '유리'
		ORDER BY TBO.ORDER_START_DATE DESC
		FETCH FIRST 2 ROWS ONLY;

		-- 방법2. JOIN에 테이블이 아닌 서브쿼리 넣는 방식 - '유리' 구매자의 주문 내역 중 가장 최근 주문한 상품의 이름과 주문일자를 조회
		SELECT *
		FROM TBL_BUYER
		WHERE BUYER_NAME = '유리';
	
		SELECT *
		FROM TBL_ORDER TBO
		JOIN (
			SELECT ID 
			FROM TBL_BUYER
			WHERE BUYER_NAME = '유리'
		) TBB
		ON TBO.BUYER_ID = TBB.ID;
	
		SELECT TBP.PRODUCT_NAME, TBO.ORDER_START_DATE
		FROM TBL_PRODUCT TBP
		JOIN(
			SELECT *
			FROM TBL_ORDER TBO
			JOIN (
				SELECT ID 
				FROM TBL_BUYER
				WHERE BUYER_NAME = '유리'
			) TBB
			ON TBO.BUYER_ID = TBB.ID
			ORDER BY ORDER_START_DATE DESC
			FETCH FIRST 1 ROWS ONLY
		) TBO
		ON TBP.ID = TBO.PRODUCT_ID;
	
		SELECT *
		FROM (
		SELECT TBP.PRODUCT_NAME, TBO.ORDER_START_DATE
		FROM TBL_PRODUCT TBP
			JOIN (
				SELECT *
				FROM TBL_ORDER TBO
				JOIN (
					SELECT ID
					FROM TBL_BUYER
					WHERE BUYER_NAME = '유리'
				) TBB
				ON TBO.BUYER_ID = TBB.ID
			) TBO
			ON TBO.PRODUCT_ID = TBP.ID
		ORDER BY ORDER_START_DATE DESC
		)
		WHERE ROWNUM = 1;


-- 30) 구매자별로 주문 완료 일자가 가장 빠른 주문 내역을 조회
	SELECT BUYER_ID, MAX(ORDER_START_DATE)
	FROM TBL_ORDER
	GROUP BY BUYER_ID;

	SELECT BUYER_NAME, FAST_ORDER
	FROM (
		SELECT BUYER_ID, MAX(ORDER_START_DATE) AS FAST_ORDER
		FROM TBL_ORDER
		GROUP BY BUYER_ID
	) TBO
	JOIN TBL_BUYER TBB 
	ON TBO.BUYER_ID = TBB.ID;
	
	SELECT *
	FROM TBL_BUYER TBB
	JOIN(
		SELECT BUYER_ID, MAX(ORDER_START_DATE) 
		FROM TBL_ORDER
		GROUP BY BUYER_ID
	) TBO
	ON TBB.ID = TBO.BUYER_ID;





-- 31) '스웨이드' 브랜드의 모든 상품 주문 건수를 조회
SELECT *
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBP.PRODUCT_BRAND = '스웨이드';


-- 32) '봉미선' 구매자가 주문한 상품들 중 가격이 5만원 이상인 상품의 이름과 가격을 조회
SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBP.PRODUCT_PRICE
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_NAME = '봉미선' AND TBP.PRODUCT_PRICE >= 50000;


-- 33) '수지' 구매자의 주소를 '서울시 송파구'로 수정
UPDATE TBL_BUYER
SET BUYER_ADDRESS = '서울시 송파구'
WHERE BUYER_NAME = '수지';
SELECT * FROM TBL_BUYER;

-- 34) 주문 상태가 '배송중'인 주문을 '배송완료'로 변경
UPDATE TBL_ORDER 
SET ORDER_STATUS = '배송완료'
WHERE ORDER_STATUS = '배송중';
SELECT * FROM TBL_ORDER;

-- 35) 25세 이하인 구매자의 이름, 나이, 구매한 상품명 조회
SELECT TBB.BUYER_NAME, TBB.BUYER_AGE, TBP.PRODUCT_NAME
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_AGE <= 25;


-- 36) 특정 상품(예: '볼캡')의 재고 수량을 0으로 변경
UPDATE TBL_PRODUCT 
SET PRODUCT_STOCK = 0
WHERE PRODUCT_NAME = '볼캡';
SELECT * FROM TBL_PRODUCT;


-- 37) '아이더' 브랜드 상품을 주문한 구매자들의 이름과 연락처를 조회
SELECT TBP.PRODUCT_BRAND, TBB.BUYER_NAME, TBB.BUYER_PHONE
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBP.PRODUCT_BRAND = '아이더';



-- 38) '맹구' 구매자가 주문한 상품들의 가격 총합을 계산
SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, SUM(TBP.PRODUCT_PRICE)
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_NAME = '맹구'
GROUP BY TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBP.PRODUCT_PRICE;



-- 39) 상품 할인 중 모든 30% 할인가격 조회
SELECT PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_PRICE - PRODUCT_PRICE * 0.3
FROM TBL_PRODUCT;



-- 40) 구매자별로 주문한 상품 개수를 조회
SELECT BUYER_NAME, PRODUCT_NAME, COUNT(PRODUCT_NAME) 
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
GROUP BY TBP.PRODUCT_NAME, TBB.BUYER_NAME;

SELECT BUYER_NAME, SUM(PRODUCT_COUNT)											-- 서브쿼리의 SELECT문의 알리아스만 불러올 수 있으므로
FROM (
	SELECT BUYER_NAME, PRODUCT_NAME, COUNT(PRODUCT_NAME) AS PRODUCT_COUNT		-- SELECT문에서 불러오고자 하는 데이터에 알리아스를 붙인다.
	FROM TBL_ORDER TBO
		JOIN TBL_PRODUCT TBP
		ON TBO.PRODUCT_ID = TBP.ID
		JOIN TBL_BUYER TBB
		ON TBO.BUYER_ID = TBB.ID
	GROUP BY TBB.BUYER_NAME, TBP.PRODUCT_NAME
	) TBO
GROUP BY BUYER_NAME;




-- 41) '짱구' 구매자가 주문한 상품 중 가격이 가장 비싼 상품을 조회
SELECT * FROM TBL_PRODUCT tp ;

SELECT *
FROM (
	SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBP.PRODUCT_PRICE
	FROM TBL_ORDER TBO
		JOIN TBL_PRODUCT TBP
		ON TBO.PRODUCT_ID = TBP.ID
		JOIN TBL_BUYER TBB
		ON TBO.BUYER_ID = TBB.ID
	WHERE TBB.BUYER_NAME = '짱구'
	ORDER BY  TBP.PRODUCT_PRICE DESC
)
WHERE ROWNUM = 1;



-- 42) '철수'와 '훈이'가 주문한 상품들을 조회하되 중복 없이 출력
SELECT DISTINCT TBB.BUYER_NAME, TBP.*
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_NAME = '철수' OR	 TBB.BUYER_NAME = '훈이';


-- 43) '강북구'에 사는 여성 구매자들의 주문 내역을 조회
SELECT TBB.BUYER_NAME, TBB.BUYER_GENDER, TBB.BUYER_ADDRESS, TBP.*
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID
WHERE TBB.BUYER_ADDRESS LIKE '%강북구%' AND TBB.BUYER_GENDER = '여';


-- 44) 구매자 이름과 그가 주문한 상품 이름, 주문 상태를 함께 출력
SELECT TBB.BUYER_NAME, TBP.PRODUCT_NAME, TBO.ORDER_STATUS
FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	JOIN TBL_BUYER TBB
	ON TBO.BUYER_ID = TBB.ID;


-- 45) 모든 상품의 평균 가격을 구하고, 평균 이상 가격인 상품들을 조회
SELECT AVG(PRODUCT_PRICE)
FROM TBL_PRODUCT;

SELECT *
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE >= (
	SELECT AVG(PRODUCT_PRICE)
	FROM TBL_PRODUCT
);

-- 46) '스파오' 브랜드 상품의 재고를 50개 이하인 경우 재고를 100개로 수정
UPDATE TBL_PRODUCT 
SET PRODUCT_STOCK = 100
WHERE PRODUCT_BRAND = '스파오' AND PRODUCT_STOCK >= 50;
SELECT * FROM TBL_PRODUCT tp ;


-- 데이터 삭제하는 문제
-- 17) BUYER_NAME이 '맹구'인 구매자의 정보를 TBL_BUYER에서 삭제 (단, 주문 이력이 있을 경우 삭제되지 않음)
-- 18) PRODUCT_NAME이 '텀블러'인 상품을 TBL_PRODUCT 테이블에서 삭제